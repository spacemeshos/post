package main

import (
	"encoding/hex"
	"flag"
	"github.com/spacemeshos/post/config"
	"github.com/spacemeshos/post/initialization"
	"github.com/spacemeshos/post/shared"
	smlog "github.com/spacemeshos/smutil/log"
	"log"
)

var (
	cfg   = config.DefaultConfig()
	id    []byte
	reset bool
)

func init() {
	flag.StringVar(&cfg.DataDir, "datadir", cfg.DataDir, "filesystem datadir path")
	flag.Uint64Var(&cfg.SpacePerUnit, "space", cfg.SpacePerUnit, "space per unit, in bytes")
	flag.Uint64Var(&cfg.FileSize, "filesize", cfg.FileSize, "space per file, in bytes (in single mode only, otherwise it is autogenerated)")
	flag.BoolVar(&reset, "reset", false, "whether to reset the given id initialization folder before start initializing")
	idHex := flag.String("id", "", "id (public key) in hex")

	flag.Parse()

	if *idHex == "" {
		log.Fatal("arg missing: id")
	}

	var err error
	id, err = hex.DecodeString(*idHex)
	if err != nil {
		log.Fatalf("id hex decode failure: %v", err)
	}
}

func main() {
	init := initialization.NewInitializer(cfg, smlog.AppLog)

	if reset {
		if err := init.Reset(id); err != nil {
			log.Fatalf("reset failure: %v", err)
		}
	}

	proof, err := init.Initialize(id)
	if err != nil {
		log.Fatalf("initialization failure: %v", err)
	}

	err = shared.PersistProof(cfg.DataDir, proof)
	if err != nil {
		log.Fatalf("persisting proof failure: %v", err)
	}
}
