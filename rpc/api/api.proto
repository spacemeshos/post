syntax = "proto3";

import "google/api/annotations.proto";

package api;

service Post {
    rpc Initialize (InitializeRequest) returns (InitializeResponse) {
        option (google.api.http) = {
            post: "/v1/initialize",
            body: "*",
        };
    }

    rpc InitializeAsync (InitializeAsyncRequest) returns (InitializeAsyncResponse) {
        option (google.api.http) = {
            post: "/v1/initializeasync",
            body: "*",
        };
    }

    rpc Execute (ExecuteRequest) returns (ExecuteResponse) {
             option (google.api.http) = {
            post: "/v1/execute",
            body: "*",
        };
    }

    rpc ExecuteAsync (ExecuteAsyncRequest) returns (ExecuteAsyncResponse) {
        option (google.api.http) = {
            post: "/v1/executeasync",
            body: "*",
        };
    }

    rpc GetProof (GetProofRequest) returns (GetProofResponse) {
        option (google.api.http) = {
            get: "/v1/proof/{id}/{challenge}"
        };
    }

    rpc Reset (ResetRequest) returns (ResetResponse) {
        option (google.api.http) = {
            post: "/v1/reset",
            body: "*",
        };
    }

    rpc GetState (GetStateRequest) returns (GetStateResponse) {
        option (google.api.http) = {
            get: "/v1/state/{id}"
        };
    }


    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse) {
        option (google.api.http) = {
            get: "/v1/info"
        };
    }

    rpc Shutdown (ShutdownRequest) returns (ShutdownResponse) {
        option (google.api.http) = {
            post: "/v1/shutdown"
        };
    }
}

message InitializeRequest {
     bytes id = 1 [json_name = "id"];
}

message InitializeResponse {
    Proof proof = 1 [json_name = "proof"];
}

message InitializeAsyncRequest {
    bytes id = 1 [json_name = "id"];
}

message InitializeAsyncResponse{
}

message ExecuteRequest {
    bytes id = 1 [json_name = "id"];
    bytes challenge = 2 [json_name = "challenge"];
}

message ExecuteResponse {
    Proof proof = 1 [json_name = "proof"];
}

message ExecuteAsyncRequest {
    bytes id = 1 [json_name = "id"];
    bytes challenge = 2 [json_name = "challenge"];
}

message ExecuteAsyncResponse {
}

message GetProofRequest {
    bytes id = 1 [json_name = "id"];
    bytes challenge = 2 [json_name = "challenge"];
}

message GetProofResponse {
    Proof proof = 1 [json_name = "proof"];
}

message ResetRequest {
    bytes id = 1 [json_name = "id"];
}

message ResetResponse {
}

message GetStateRequest {
    bytes id = 1 [json_name = "id"];
}

message GetStateResponse {
    enum State {
        NotStarted = 0;
        Completed = 1;
        Crashed = 2;
        Initializing = 3;
    }
    State state = 1 [json_name = "state"];
    uint64 requiredSpace = 2 [json_name = "required_space"];
}

message GetInfoRequest {
}

message GetInfoResponse {
    string version = 1 [json_name = "version"];
    Config config = 2 [json_name = "config"];
    State state = 3 [json_name = "state"];
}

message ShutdownRequest {
}

message ShutdownResponse {
}

message Proof {
    bytes id = 1 [json_name = "id"];
    bytes challenge = 2 [json_name = "challenge"];
    bytes merkleRoot = 3 [json_name = "merkle_root"];
    repeated bytes provenLeaves = 4 [json_name = "proven_leaves"];
    repeated bytes proofNodes = 5 [json_name = "proof_nodes"];
}

message Config {
    string datadir = 1 [json_name = "datadir"];
    int64 spacePerUnit = 2 [json_name = "space_per_unit"];
    int32 difficulty = 3 [json_name = "difficulty"];
    int32 labels = 4 [json_name = "labels"];
    int32 cacheLayer = 5 [json_name = "cache_layer"];
}

message State {
    bytes id = 1 [json_name = "id"];
    string dir = 3 [json_name = "dir"];
    repeated string provenChallenges = 2 [json_name = "proven_challenges"];
}
