syntax = "proto3";
package api;
import "google/api/annotations.proto";

service Post {
    rpc Initialize (InitializeRequest) returns (InitializeResponse) {
        option (google.api.http) = {
            post: "/v1/initialize",
            body: "*",
        };
    }

    rpc InitializeAsync (InitializeAsyncRequest) returns (InitializeAsyncResponse) {
        option (google.api.http) = {
            post: "/v1/initializeasync",
            body: "*",
        };
    }

    rpc Execute (ExecuteRequest) returns (ExecuteResponse) {
        option (google.api.http) = {
            post: "/v1/execute",
            body: "*",
        };
    }

    rpc ExecuteAsync (ExecuteAsyncRequest) returns (ExecuteAsyncResponse) {
        option (google.api.http) = {
            post: "/v1/executeasync",
            body: "*",
        };
    }

    rpc GetProof (GetProofRequest) returns (GetProofResponse) {
        option (google.api.http) = {
            get: "/v1/proof/{challenge}"
        };
    }

    rpc Reset (ResetRequest) returns (ResetResponse) {
        option (google.api.http) = {
            post: "/v1/reset",
            body: "*",
        };
    }

    rpc GetState (GetStateRequest) returns (GetStateResponse) {
        option (google.api.http) = {
            get: "/v1/state/{id}"
        };
    }


    rpc GetInfo (GetInfoRequest) returns (GetInfoResponse) {
        option (google.api.http) = {
            get: "/v1/info"
        };
    }

    rpc Shutdown (ShutdownRequest) returns (ShutdownResponse) {
        option (google.api.http) = {
            post: "/v1/shutdown"
        };
    }
}

message InitializeRequest {
    bytes id = 1 [json_name = "id"];
}

message InitializeResponse {
}

message InitializeAsyncRequest {
    bytes id = 1 [json_name = "id"];
}

message InitializeAsyncResponse {
}

message ExecuteRequest {
    bytes id = 1 [json_name = "id"];
    bytes challenge = 2 [json_name = "challenge"];
}

message ExecuteResponse {
    Proof proof = 1 [json_name = "proof"];
    ProofMetadata proof_metadata = 2 [json_name = "proof_metadata"];
}

message ExecuteAsyncRequest {
    bytes id = 1 [json_name = "id"];
    bytes challenge = 2 [json_name = "challenge"];
}

message ExecuteAsyncResponse {
}

message GetProofRequest {
    bytes challenge = 1 [json_name = "challenge"];
}

message GetProofResponse {
    Proof proof = 1 [json_name = "proof"];
    ProofMetadata proof_metadata = 2 [json_name = "proof_metadata"];
}

message ResetRequest {
    bytes id = 1 [json_name = "id"];
}

message ResetResponse {
}

message GetStateRequest {
    bytes id = 1 [json_name = "id"];
}

message GetStateResponse {
    enum State {
        NotStarted = 0;
        Completed = 1;
        Stopped = 2;
        Crashed = 3;
        Initializing = 4;
    }
    State state = 1 [json_name = "state"];
    uint64 bytes_written = 2 [json_name = "bytes_written"];
}

message GetInfoRequest {
}

message GetInfoResponse {
    string version = 1 [json_name = "version"];
    Config config = 2 [json_name = "config"];
    State state = 3 [json_name = "state"];
}

message ShutdownRequest {
}

message ShutdownResponse {
}

message Proof {
    uint32 nonce = 1 [json_name = "nonce"];
    bytes indices = 2 [json_name = "indices"];
}

message ProofMetadata {
    bytes challenge = 1 [json_name = "challenge"];
    uint64 num_labels = 2 [json_name = "num_labels"];
    uint32 label_size = 3 [json_name = "label_size"];
    uint32 k1 = 4 [json_name = "k1"];
    uint32 k2 = 5 [json_name = "k2"];
}

message Config {
    string datadir = 1 [json_name = "datadir"];
    uint64 numLabels = 2 [json_name = "num_labels"];
    uint32 label_size = 3 [json_name = "label_size"];
    uint32 k1 = 4 [json_name = "k1"];
    uint32 k2 = 5 [json_name = "k2"];
    uint32 numFiles = 6 [json_name = "num_files"];
}

message State {
    bytes id = 1 [json_name = "id"];
    string dir = 3 [json_name = "dir"];
    repeated string provenChallenges = 2 [json_name = "proven_challenges"];
}
